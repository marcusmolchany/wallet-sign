{"version":3,"file":"static/js/4591.5505721c.chunk.js","mappings":"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","sources":["../node_modules/viem/errors/ccip.ts","../node_modules/viem/utils/ccip.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type { Hex } from '../types/misc.js'\nimport { stringify } from '../utils/stringify.js'\n\nimport { BaseError } from './base.js'\nimport { getUrl } from './utils.js'\n\nexport type OffchainLookupErrorType = OffchainLookupError & {\n  name: 'OffchainLookupError'\n}\nexport class OffchainLookupError extends BaseError {\n  constructor({\n    callbackSelector,\n    cause,\n    data,\n    extraData,\n    sender,\n    urls,\n  }: {\n    callbackSelector: Hex\n    cause: BaseError\n    data: Hex\n    extraData: Hex\n    sender: Address\n    urls: readonly string[]\n  }) {\n    super(\n      cause.shortMessage ||\n        'An error occurred while fetching for an offchain result.',\n      {\n        cause,\n        metaMessages: [\n          ...(cause.metaMessages || []),\n          cause.metaMessages?.length ? '' : [],\n          'Offchain Gateway Call:',\n          urls && [\n            '  Gateway URL(s):',\n            ...urls.map((url) => `    ${getUrl(url)}`),\n          ],\n          `  Sender: ${sender}`,\n          `  Data: ${data}`,\n          `  Callback selector: ${callbackSelector}`,\n          `  Extra data: ${extraData}`,\n        ].flat(),\n        name: 'OffchainLookupError',\n      },\n    )\n  }\n}\n\nexport type OffchainLookupResponseMalformedErrorType =\n  OffchainLookupResponseMalformedError & {\n    name: 'OffchainLookupResponseMalformedError'\n  }\nexport class OffchainLookupResponseMalformedError extends BaseError {\n  constructor({ result, url }: { result: any; url: string }) {\n    super(\n      'Offchain gateway response is malformed. Response data must be a hex value.',\n      {\n        metaMessages: [\n          `Gateway URL: ${getUrl(url)}`,\n          `Response: ${stringify(result)}`,\n        ],\n        name: 'OffchainLookupResponseMalformedError',\n      },\n    )\n  }\n}\n\n/** @internal */\nexport type OffchainLookupSenderMismatchErrorType =\n  OffchainLookupSenderMismatchError & {\n    name: 'OffchainLookupSenderMismatchError'\n  }\nexport class OffchainLookupSenderMismatchError extends BaseError {\n  constructor({ sender, to }: { sender: Address; to: Address }) {\n    super(\n      'Reverted sender address does not match target contract address (`to`).',\n      {\n        metaMessages: [\n          `Contract address: ${to}`,\n          `OffchainLookup sender address: ${sender}`,\n        ],\n        name: 'OffchainLookupSenderMismatchError',\n      },\n    )\n  }\n}\n","import type { Abi, Address } from 'abitype'\n\nimport { type CallParameters, call } from '../actions/public/call.js'\nimport type { Transport } from '../clients/transports/createTransport.js'\nimport type { BaseError } from '../errors/base.js'\nimport {\n  OffchainLookupError,\n  type OffchainLookupErrorType as OffchainLookupErrorType_,\n  OffchainLookupResponseMalformedError,\n  type OffchainLookupResponseMalformedErrorType,\n  OffchainLookupSenderMismatchError,\n} from '../errors/ccip.js'\nimport {\n  HttpRequestError,\n  type HttpRequestErrorType,\n} from '../errors/request.js'\nimport type { Chain } from '../types/chain.js'\nimport type { Hex } from '../types/misc.js'\n\nimport type { Client } from '../clients/createClient.js'\nimport type { ErrorType } from '../errors/utils.js'\nimport { decodeErrorResult } from './abi/decodeErrorResult.js'\nimport { encodeAbiParameters } from './abi/encodeAbiParameters.js'\nimport { isAddressEqual } from './address/isAddressEqual.js'\nimport { concat } from './data/concat.js'\nimport { isHex } from './data/isHex.js'\nimport {\n  localBatchGatewayRequest,\n  localBatchGatewayUrl,\n} from './ens/localBatchGatewayRequest.js'\nimport { stringify } from './stringify.js'\n\nexport const offchainLookupSignature = '0x556f1830'\nexport const offchainLookupAbiItem = {\n  name: 'OffchainLookup',\n  type: 'error',\n  inputs: [\n    {\n      name: 'sender',\n      type: 'address',\n    },\n    {\n      name: 'urls',\n      type: 'string[]',\n    },\n    {\n      name: 'callData',\n      type: 'bytes',\n    },\n    {\n      name: 'callbackFunction',\n      type: 'bytes4',\n    },\n    {\n      name: 'extraData',\n      type: 'bytes',\n    },\n  ],\n} as const satisfies Abi[number]\n\nexport type OffchainLookupErrorType = OffchainLookupErrorType_ | ErrorType\n\nexport async function offchainLookup<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  {\n    blockNumber,\n    blockTag,\n    data,\n    to,\n  }: Pick<CallParameters, 'blockNumber' | 'blockTag'> & {\n    data: Hex\n    to: Address\n  },\n): Promise<Hex> {\n  const { args } = decodeErrorResult({\n    data,\n    abi: [offchainLookupAbiItem],\n  })\n  const [sender, urls, callData, callbackSelector, extraData] = args\n\n  const { ccipRead } = client\n  const ccipRequest_ =\n    ccipRead && typeof ccipRead?.request === 'function'\n      ? ccipRead.request\n      : ccipRequest\n\n  try {\n    if (!isAddressEqual(to, sender))\n      throw new OffchainLookupSenderMismatchError({ sender, to })\n\n    const result = urls.includes(localBatchGatewayUrl)\n      ? await localBatchGatewayRequest({\n          data: callData,\n          ccipRequest: ccipRequest_,\n        })\n      : await ccipRequest_({ data: callData, sender, urls })\n\n    const { data: data_ } = await call(client, {\n      blockNumber,\n      blockTag,\n      data: concat([\n        callbackSelector,\n        encodeAbiParameters(\n          [{ type: 'bytes' }, { type: 'bytes' }],\n          [result, extraData],\n        ),\n      ]),\n      to,\n    } as CallParameters)\n\n    return data_!\n  } catch (err) {\n    throw new OffchainLookupError({\n      callbackSelector,\n      cause: err as BaseError,\n      data,\n      extraData,\n      sender,\n      urls,\n    })\n  }\n}\n\nexport type CcipRequestParameters = {\n  data: Hex\n  sender: Address\n  urls: readonly string[]\n}\n\nexport type CcipRequestReturnType = Hex\n\nexport type CcipRequestErrorType =\n  | HttpRequestErrorType\n  | OffchainLookupResponseMalformedErrorType\n  | ErrorType\n\nexport async function ccipRequest({\n  data,\n  sender,\n  urls,\n}: CcipRequestParameters): Promise<CcipRequestReturnType> {\n  let error = new Error('An unknown error occurred.')\n\n  for (let i = 0; i < urls.length; i++) {\n    const url = urls[i]\n    const method = url.includes('{data}') ? 'GET' : 'POST'\n    const body = method === 'POST' ? { data, sender } : undefined\n    const headers: HeadersInit =\n      method === 'POST' ? { 'Content-Type': 'application/json' } : {}\n\n    try {\n      const response = await fetch(\n        url.replace('{sender}', sender.toLowerCase()).replace('{data}', data),\n        {\n          body: JSON.stringify(body),\n          headers,\n          method,\n        },\n      )\n\n      let result: any\n      if (\n        response.headers.get('Content-Type')?.startsWith('application/json')\n      ) {\n        result = (await response.json()).data\n      } else {\n        result = (await response.text()) as any\n      }\n\n      if (!response.ok) {\n        error = new HttpRequestError({\n          body,\n          details: result?.error\n            ? stringify(result.error)\n            : response.statusText,\n          headers: response.headers,\n          status: response.status,\n          url,\n        })\n        continue\n      }\n\n      if (!isHex(result)) {\n        error = new OffchainLookupResponseMalformedError({\n          result,\n          url,\n        })\n        continue\n      }\n\n      return result\n    } catch (err) {\n      error = new HttpRequestError({\n        body,\n        details: (err as Error).message,\n        url,\n      })\n    }\n  }\n\n  throw error\n}\n"],"names":["OffchainLookupError","BaseError","constructor","callbackSelector","cause","data","extraData","sender","urls","super","shortMessage","metaMessages","length","map","url","getUrl","flat","name","OffchainLookupResponseMalformedError","result","stringify","OffchainLookupSenderMismatchError","to","offchainLookupSignature","offchainLookupAbiItem","type","inputs","async","offchainLookup","client","blockNumber","blockTag","args","decodeErrorResult","abi","callData","ccipRead","ccipRequest_","request","ccipRequest","isAddressEqual","includes","localBatchGatewayUrl","localBatchGatewayRequest","data_","call","concat","encodeAbiParameters","err","error","Error","i","method","body","undefined","headers","response","fetch","replace","toLowerCase","JSON","get","startsWith","json","text","ok","HttpRequestError","details","statusText","status","isHex","message"],"sourceRoot":""}