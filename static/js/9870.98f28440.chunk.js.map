{"version":3,"file":"static/js/9870.98f28440.chunk.js","mappings":"+jBAAYA,EAgBAC,E,sBChBCC,EAAgB,iBAAM,OAAN,ECCvBC,EAAU,SAACC,GAAD,OAAyBA,EAAIC,SAAS,IAAIC,SAAS,EAAG,IAAtD,EAQVC,EAAoB,WACxB,MAAsB,qBAAXC,OAPM,SAACC,GAClB,IAAMC,EAAM,IAAIC,YAAYF,GAAO,IAAM,GAEzC,OADAD,OAAOI,OAAOC,gBAAgBH,GACvBI,MAAMC,KAAKL,EAAKP,GAASa,KAAK,GACtC,CAIUC,CAAW,KAGb,IAAIC,MAAOC,UAAUd,SAAS,GACtC,ECVKe,GAAAA,EAAAA,EAAAA,IAAAA,SAAAA,K,kBACGA,EAAAA,YAAc,SAA2CC,EAAWC,GAGzE,MAAO,CACLC,GAHShB,IAITc,OAAAA,EACAC,OAAAA,EACAE,IAAK,CACHC,WAAYvB,KAGjB,EAEMkB,EAAAA,aAAe,SAACG,EAAeG,EAAiCC,GAAjD,MAAuF,CAC3GJ,GAAAA,EACAK,SAAS,EACTD,QAAAA,EACAD,KAAAA,EAJoB,EAOfN,EAAAA,kBAAoB,SAACG,EAAeM,EAAeF,GAA/B,MAAmE,CAC5FJ,GAAAA,EACAK,SAAS,EACTC,MAAAA,EACAF,QAAAA,EAJyB,EH1B7B,SAAY3B,GACVA,EAAAA,iBAAAA,mBACAA,EAAAA,QAAAA,UACAA,EAAAA,aAAAA,eACAA,EAAAA,YAAAA,cACAA,EAAAA,kBAAAA,oBACAA,EAAAA,gBAAAA,kBACAA,EAAAA,YAAAA,cACAA,EAAAA,iBAAAA,mBACAA,EAAAA,mBAAAA,qBACAA,EAAAA,qBAAAA,uBACAA,EAAAA,mBAAAA,qBACAA,EAAAA,sBAAAA,wBACAA,EAAAA,0BAAAA,2BAbF,EAAYA,IAAAA,EAAO,KAgBnB,SAAYC,GACVA,EAAAA,mBAAAA,oBADF,EAAYA,IAAAA,EAAiB,K,IITvB6B,GAAAA,EAAAA,EAAAA,IAMJ,aAAqE,WAAzDC,EAAyD,uDAAvB,KAAMC,EAAiB,wEALpD,KAAAD,eAAkC,KAC3C,KAAAE,UAAY,IAAIC,IAChB,KAAAF,WAAY,EACZ,KAAAG,SAA6B,qBAAX3B,OAWlB,KAAA4B,eAAiB,YAA6D,IAA1DC,EAA0D,EAA1DA,OAAQX,EAAkD,EAAlDA,KAAMY,EAA4C,EAA5CA,OAClCC,GAAoBb,EACpBc,GAAoB,EAAKL,UAAYG,IAAW9B,OAAOiC,OACvDC,EAA6C,qBAAjBhB,EAAKC,SAA2BgB,SAASjB,EAAKC,QAAQiB,MAAM,KAAK,IAC7FC,EAAkD,kBAAvBH,GAAmCA,GAAsB,EACtFI,GAAc,EAKlB,OAJIhC,MAAMiC,QAAQ,EAAKhB,kBACrBe,OAA4EE,IAA9D,EAAKjB,eAAekB,MAAK,SAACC,GAAD,OAAYA,EAAOC,KAAKd,EAAxB,MAGjCE,GAAoBC,GAAoBK,GAAqBC,CACtE,EAEO,KAAAM,mBAAqB,SAACC,GAC5BC,QAAQC,KAAR,+DAAqEF,EAAIhB,OAAzE,MAAqFgB,EAAI3B,KAC1F,EAEO,KAAA8B,gBAAkB,SAACH,GACrB,EAAKjB,eAAeiB,KACtB,EAAKrB,WAAa,EAAKoB,mBAAmBC,GAC1C,EAAKI,sBAAsBJ,EAAI3B,MAElC,EAEO,KAAA+B,sBAAwB,SAACC,GAC/B,IAAQnC,EAAOmC,EAAPnC,GAEFoC,EAAK,EAAK1B,UAAU2B,IAAIrC,GAC1BoC,IACFA,EAAGD,GAEH,EAAKzB,UAAU4B,OAAOtC,GAEzB,EAEM,KAAAuC,KAAO,SAA0BzC,EAAWC,GACjD,IAAMyC,EAAU3C,EAAiB4C,YAAY3C,EAAQC,GAErD,GAAI,EAAKa,SACP,MAAM,IAAI8B,MAAM,wBAIlB,OADAzD,OAAOiC,OAAOyB,YAAYH,EAAS,KAC5B,IAAII,SAAQ,SAACC,EAASC,GAC3B,EAAKpC,UAAUqC,IAAIP,EAAQxC,IAAI,SAACgD,GACzBA,EAAS3C,QAKdwC,EAAQG,GAJNF,EAAO,IAAIJ,MAAMM,EAAS1C,OAK7B,GACF,GACF,EA7DC2C,KAAKzC,eAAiBA,EACtByC,KAAKxC,UAAYA,EAEZwC,KAAKrC,UACR3B,OAAOiE,iBAAiB,UAAWD,KAAKhB,gBAE3C,IA0DH,I,sBCuBakB,EAA0B,SAACC,GACtC,MAAsB,kBAARA,GAA2B,MAAPA,GAAe,WAAYA,GAAO,UAAWA,GAAO,YAAaA,CACpG,E,WCzFKC,EAAAA,WAGJ,WAAYC,IAA0B,eACpCL,KAAKK,aAAeA,CACrB,C,uFAED,WAAsBC,GAAtB,+EACOA,EADP,sBAEU,IAAIb,MAAM,sBAFpB,uBAKyBO,KAAKK,aAAaf,KAIvC9D,EAAQ+E,kBAAmB,CAAED,WAAAA,IATjC,cAKQP,EALR,yBAWSA,EAAS7C,MAXlB,gD,yHAcA,WAAkBsD,GAAlB,qFACQC,EAAiB,CACrBD,QAAAA,GAFJ,SAKyBR,KAAKK,aAAaf,KACvC9D,EAAQkF,YACRD,GAPJ,cAKQV,EALR,yBAUSA,EAAS7C,MAVlB,gD,8HAaA,WAAuByD,GAAvB,+EACOT,EAAwBS,GAD/B,sBAEU,IAAIlB,MAAM,sBAFpB,uBAKyBO,KAAKK,aAAaf,KAIvC9D,EAAQoF,iBAAkB,CAAED,UAAAA,IAThC,cAKQZ,EALR,yBAWSA,EAAS7C,MAXlB,gD,kHAcA,mGAAa2D,EAAb,EAAaA,IAAK/D,EAAlB,EAAkBA,OACX+D,GAAQA,EAAIC,OADnB,sBAEU,IAAIrB,MAAM,+BAFpB,cAKQgB,EAAiB,CACrBI,IAAAA,EACA/D,OAAAA,GAPJ,SAUyBkD,KAAKK,aAAaf,KAIvC9D,EAAQuF,iBAAkBN,GAd9B,cAUQV,EAVR,yBAgBSA,EAAS7C,MAhBlB,gD,2DAhDIkD,GCdOY,EAAY,CACvBC,SAAU,WACVC,aAAc,eACdC,YAAa,cACbC,eAAgB,iBAChBC,YAAa,cACbC,mBAAoB,qBACpBC,qBAAsB,uBACtBC,iBAAkB,mBAClBC,yBAA0B,2BAC1BC,0BAA2B,4BAC3BC,wBAAyB,0BACzBC,gBAAiB,kBACjBC,iBAAkB,oBCOdC,EAA6C,CACjDC,kBAAmB,eAACC,EAAD,uDAAO,SAAP,OAAoBA,CAApB,EACnBC,wBAAyB,eAACD,EAAD,+DAA0BA,CAA1B,EACzBE,iBAAkB,SAACF,GAAD,OAChBG,OAAOC,UAAUJ,GAAjB,YAA6BA,EAAInG,SAAS,KAASmG,CADnC,GASdK,EAAAA,WAiBJ,WAAYhC,GAA0B,2BACpCL,KAAKK,aAAeA,EACpBL,KAAKsC,KAAOtC,KAAKuC,aAAmD,CAClED,KAAMtB,EAAUC,SAChBuB,WAAY,CAAC,KAAMV,EAAgBC,qBAErC/B,KAAKyC,WAAazC,KAAKuC,aAAwC,CAC7DD,KAAMtB,EAAUI,eAChBoB,WAAY,CAAC,KAAMV,EAAgBC,qBAErC/B,KAAK0C,QAAU1C,KAAKuC,aAAwC,CAC1DD,KAAMtB,EAAUK,YAChBmB,WAAY,CAAC,KAAMV,EAAgBC,qBAErC/B,KAAK2C,aAAe3C,KAAKuC,aAAgD,CACvED,KAAMtB,EAAUQ,iBAChBgB,WAAY,CAAC,KAAMV,EAAgBI,iBAAkBJ,EAAgBC,qBAEvE/B,KAAK4C,YAAc5C,KAAKuC,aAAuC,CAC7DD,KAAMtB,EAAUG,cAElBnB,KAAK6C,eAAiB7C,KAAKuC,aAAkF,CAC3GD,KAAMtB,EAAUM,mBAChBkB,WAAY,CAAC,KAAMV,EAAgBG,2BAErCjC,KAAK8C,iBAAmB9C,KAAKuC,aAG3B,CACAD,KAAMtB,EAAUO,qBAChBiB,WAAY,CAACV,EAAgBI,iBAAkBJ,EAAgBG,2BAEjEjC,KAAK+C,qBAAuB/C,KAAKuC,aAA8C,CAC7ED,KAAMtB,EAAUS,2BAElBzB,KAAKgD,sBAAwBhD,KAAKuC,aAAqD,CACrFD,KAAMtB,EAAUU,4BAElB1B,KAAKiD,oBAAsBjD,KAAKuC,aAAwC,CACtED,KAAMtB,EAAUW,wBAChBa,WAAY,CAAC,KAAMV,EAAgBC,qBAErC/B,KAAKkD,YAAclD,KAAKuC,aAA8B,CACpDD,KAAMtB,EAAUE,eAElBlB,KAAKmD,eAAiB,SAACC,GAAD,OACpB,EAAKb,aAA0C,CAC7CD,KAAMtB,EAAUY,iBADlB,CAEG,CAACwB,GAHgB,EAItBpD,KAAKqD,gBAAkBrD,KAAKuC,aAA2C,CACrED,KAAMtB,EAAUa,kBAEnB,C,2CAEO,SAAuCyB,GAAsB,WAC3DhB,EAAqBgB,EAArBhB,KAAME,EAAec,EAAfd,WAEd,gDAAO,WAAO1F,GAAP,qFACD0F,GAAclG,MAAMiC,QAAQzB,IAC9B0F,EAAWe,SAAQ,SAACC,EAAqDC,GACnED,IACF1G,EAAO2G,GAAKD,EAAU1G,EAAO2G,IAEhC,IAGGvE,EAAyB,CAC7BoD,KAAAA,EACAxF,OAAQA,GAAU,IAXf,SAckB,EAAKuD,aAAaf,KAAwC9D,EAAQkI,QAASxE,GAd7F,cAcCa,EAdD,yBAgBEA,EAAS7C,MAhBX,2CAAP,OAAO,SAAP,UAAO,EAAP,yBAkBD,K,EA5FGmF,G,2CChCAsB,EAAc,aACdC,EAAoB,a,sDCgBbC,EAA+B,KAE/BC,EAAb,0CAIE,WAAYtD,EAAiBuD,EAAc7G,GAAc,6BACvD,cAAMsD,IAEDuD,KAAOA,EACZ,EAAK7G,KAAOA,EAIZ8G,OAAOC,gBAAP,UAA4BH,EAAiBI,WARU,CASxD,CAbH,0BAAsCzE,QCfhC0E,EAAAA,WAGJ,WAAY9D,IAA0B,eACpCL,KAAKK,aAAeA,CACrB,C,sFAED,yGACyBL,KAAKK,aAAaf,KACvC9D,EAAQ4I,2BACR5F,GAHJ,cACQuB,EADR,yBAMSA,EAAS7C,MANlB,gD,+HASA,WAAyBmH,GAAzB,+EACOrE,KAAKsE,yBAAyBD,GADrC,sBAEU,IAAIP,EAAiB,iCAAkCD,GAFjE,gCAM2B7D,KAAKK,aAAaf,KAIvC9D,EAAQ+I,0BAA2BF,GAVzC,cAMUtE,EANV,yBAYWA,EAAS7C,MAZpB,sCAcU,IAAI4G,EAAiB,uBAAwBD,GAdvD,yD,6FAkBA,SAAyBQ,GACvB,OAAOA,EAAYG,OAAM,SAACC,GACxB,MAAkB,kBAAPA,GACFT,OAAOU,KAAKD,GAAID,OAAM,SAAC3H,GAC5B,QAAImH,OAAOW,OAAOlJ,GAAmBmJ,SAAS/H,EAK/C,GAIJ,GACF,K,EAhDGsH,GCEAU,EAAgB,SAACC,EAAmBT,GAApB,OACpBA,EAAYU,MAAK,SAACC,GAAD,OAAgBA,EAAWC,mBAAqBH,CAAhD,GADG,EA0BtB,EAvB0B,kBAAM,SAACI,EAAYC,EAAqBC,GAChE,IAAMC,EAAiBD,EAAWE,MAmBlC,OAjBAF,EAAWE,OAAX,uBAAmB,kGAEXC,EAAS,IAAIpB,EAAQnE,KAAcK,cAFxB,SAIckF,EAAOC,iBAJrB,UAIbC,EAJa,OAMZZ,EAAcM,EAAwBM,GAN1B,gCAOYF,EAAOG,mBAAmB,EAAC,UAAGP,EAAyB,CAAC,KAPpE,OAOfM,EAPe,iBAUZZ,EAAcM,EAAwBM,GAV1B,uBAWT,IAAI3B,EAAiB,uBAAwBD,GAXpC,iCAcVwB,EAAeM,MAAM3F,OAdX,iDAiBZoF,CACR,CArByB,E,wUCUpBQ,EAAAA,WAGJ,WAAYvF,IAA0B,eACpCL,KAAKK,aAAeA,CACrB,C,oFAED,yGACyBL,KAAKK,aAAaf,KACvC9D,EAAQqK,kBACRrH,GAHJ,cACQuB,EADR,yBAMSA,EAAS7C,MANlB,gD,oHASA,yGACyB8C,KAAKK,aAAaf,KACvC9D,EAAQsK,iBACRtH,GAHJ,cACQuB,EADR,yBAMSA,EAAS7C,MANlB,gD,qIAUA,mJAAwE,CAAC,EAAzE,IAAiC6I,SAAAA,OAAjC,MAA4C,MAA5C,WACyB/F,KAAKK,aAAaf,KACvC9D,EAAQwK,gBACR,CACED,SAAAA,IAJN,cACQhG,EADR,yBAQSA,EAAS7C,MARlB,gD,+HAWQ,WAAyB+I,GAAzB,uGAA8CC,EAA9C,+BAA0D,KAA1D,SACiBlG,KAAKmG,UADtB,cACAC,EADA,OAGAC,GAA8BC,EAAAA,EAAAA,GAAmB,CACrDC,IAAK,CACH,CACEC,UAAU,EACVC,OAAQ,CACN,CACEC,KAAM,YACNC,KAAM,WAER,CACED,KAAM,aACNC,KAAM,UAGVD,KAAM,mBACNE,QAAS,CACP,CACEF,KAAM,GACNC,KAAM,WAGVE,SAAS,EACTC,gBAAiB,aACjBH,KAAM,aAGVI,aAAc,mBACdzD,KAAM,CAAC2C,EAAwBC,KAG3BhH,EAAU,CACdoD,KAAMtB,EAAUC,SAChBnE,OAAQ,CACN,CACEkK,GAAIZ,EAASa,YACb/J,KAAMmJ,GAER,WAxCE,kBA4CmBrG,KAAKK,aAAaf,KACvC9D,EAAQkI,QACRxE,GA9CE,cA4CEa,EA5CF,yBAiDGA,EAAS7C,KAAKgK,MAAM,EAAG,IAAIC,gBAAkBxD,GAjDhD,4DAmDG,GAnDH,0D,qIAuDA,WAA8BsC,GAA9B,uGAAmDC,EAAnD,+BAA+D,KAA/D,SACiBlG,KAAKmG,UADtB,cACAC,EADA,OAGAC,GAA8BC,EAAAA,EAAAA,GAAmB,CACrDC,IAAK,CACH,CACEC,UAAU,EACVC,OAAQ,CACN,CACEC,KAAM,QACNC,KAAM,SAER,CACED,KAAM,aACNC,KAAM,UAGVD,KAAM,mBACNE,QAAS,CACP,CACEF,KAAM,GACNC,KAAM,WAGVE,SAAS,EACTC,gBAAiB,aACjBH,KAAM,aAGVI,aAAc,mBACdzD,KAAM,CAAC2C,EAAwBC,KAG3BhH,EAAU,CACdoD,KAAMtB,EAAUC,SAChBnE,OAAQ,CACN,CACEkK,GAAIZ,EAASa,YACb/J,KAAMmJ,GAER,WAxCE,kBA6CmBrG,KAAKK,aAAaf,KACvC9D,EAAQkI,QACRxE,GA/CE,cA6CEa,EA7CF,yBAkDGA,EAAS7C,KAAKgK,MAAM,EAAG,IAAIC,gBAAkBvD,GAlDhD,4DAoDG,GApDH,0D,yFAwDR,SAAqBpD,GACnB,OAAO4G,EAAAA,EAAAA,GAAY5G,EACpB,G,uCAED,SAA0B6G,GACxB,IAAMC,EACmC,kBAAhCD,EAAaE,OAAOD,QACvBD,EAAaE,OAAOD,QAAQE,WAC5BrF,OAAOkF,EAAaE,OAAOD,SAE7BG,EAAcJ,EAAaI,YAC/B,IAAKA,EAAa,CAChB,IAAMC,EAAS1D,OAAOW,OAAO0C,EAAaM,OAEpCC,EAAe5D,OAAOU,KAAK2C,EAAaM,OAAOE,QAAO,SAACC,GAAD,OAC1DJ,EAAOlD,OAAM,SAACuD,GAAD,OAAeA,EAAUvD,OAAM,qBAAGmC,KAAgBqB,QAAQ,IAAK,IAAIA,QAAQ,IAAK,MAAQF,CAAzD,GAA/B,GAD6C,IAG5D,GAA4B,IAAxBF,EAAa9G,QAAgB8G,EAAa9G,OAAS,EAAG,MAAM,IAAIrB,MAAM,8BAC1EgI,EAAcG,EAAa,EAC5B,CAED,OAAOK,EAAAA,EAAAA,IAAc,CACnBzH,QAAS6G,EAAa7G,QACtB+G,QAAQ,kBACHF,EAAaE,QADZ,IAEJD,QAAAA,EACAY,kBAAmBb,EAAaE,OAAOW,kBACvCC,KAAMd,EAAaE,OAAOY,OAE5BR,MAAON,EAAaM,MACpBF,YAAAA,GAEH,G,2EAED,WAA2BxB,GAA3B,4FACyBjG,KAAKK,aAAaf,KACvC9D,EAAQ4M,qBACRnC,GAHJ,cACQlG,EADR,yBAMSA,EAAS7C,MANlB,gD,6HASA,WAAsBsD,GAAtB,sGAAyD0F,EAAzD,+BAAqE,KAE5C,kBAAZ1F,IACT6H,EAAK,yCAAG,kGACApC,EAAc,EAAKqC,qBAAqB9H,GADxC,SAE0B,EAAK+H,oBAAoBtC,EAAaC,GAFhE,cAEAsC,EAFA,yBAGCA,GAHD,2CAAH,sDAOHtI,EAAwBM,KAC1B6H,EAAK,yCAAG,kGACApC,EAAc,EAAKwC,0BAA0BjI,GAD7C,SAE0B,EAAK+H,oBAAoBtC,EAAaC,GAFhE,cAEAsC,EAFA,yBAGCA,GAHD,2CAAH,uDAMHH,EAjBN,gCAkB0BA,IAlB1B,cAkBUK,EAlBV,yBAoBWA,GApBX,aAuBQ,IAAIjJ,MAAM,wBAvBlB,2C,iIA0BA,WAA0BwG,GAA1B,gGAA+CC,EAA/C,+BAA2D,KACnDyC,EAAS,CAAC3I,KAAK4I,mBAAmBC,KAAK7I,MAAOA,KAAK8I,wBAAwBD,KAAK7I,OADxF,MAGsB2I,EAHtB,gDAGaN,EAHb,cAI0BA,EAAMpC,EAAaC,GAJ7C,6DAMa,GANb,6DAUS,GAVT,iD,gIAaA,yGACyBlG,KAAKK,aAAaf,KACvC9D,EAAQuN,wBACRvK,GAHJ,cACQuB,EADR,yBAMSA,EAAS7C,MANlB,gD,+HAUM,yGACmB8C,KAAKK,aAAaf,KACvC9D,EAAQwN,wBACRxK,GAHE,cACEuB,EADF,yBAMGA,EAAS7C,MANZ,gD,0DAhPF0I,GAgPEqD,EAAAA,CADLC,KACK,uC,ICvPFC,GAAAA,EAAAA,EAAAA,IAOJ,aAA2B,IAAfC,EAAe,uDAAF,CAAC,GAAC,eACzB,MAAiDA,EAAzCC,eAAAA,OAAR,MAAyB,KAAzB,IAAiDD,EAAlBE,MAAAA,OAA/B,SAEAtJ,KAAKK,aAAe,IAAIkJ,EAAsBF,EAAgBC,GAC9DtJ,KAAKwJ,IAAM,IAAInH,EAAIrC,KAAKK,cACxBL,KAAKa,IAAM,IAAIT,EAAIJ,KAAKK,cACxBL,KAAKyJ,KAAO,IAAI7D,EAAK5F,KAAKK,cAC1BL,KAAKuF,OAAS,IAAIpB,EAAOnE,KAAKK,aAC/B,ICzBH,ED4BA,C","sources":["../node_modules/@safe-global/safe-apps-sdk/src/communication/methods.ts","../node_modules/@safe-global/safe-apps-sdk/src/version.ts","../node_modules/@safe-global/safe-apps-sdk/src/communication/utils.ts","../node_modules/@safe-global/safe-apps-sdk/src/communication/messageFormatter.ts","../node_modules/@safe-global/safe-apps-sdk/src/communication/index.ts","../node_modules/@safe-global/safe-apps-sdk/src/types/sdk.ts","../node_modules/@safe-global/safe-apps-sdk/src/txs/index.ts","../node_modules/@safe-global/safe-apps-sdk/src/eth/constants.ts","../node_modules/@safe-global/safe-apps-sdk/src/eth/index.ts","../node_modules/@safe-global/safe-apps-sdk/src/safe/signatures.ts","../node_modules/@safe-global/safe-apps-sdk/src/types/permissions.ts","../node_modules/@safe-global/safe-apps-sdk/src/wallet/index.ts","../node_modules/@safe-global/safe-apps-sdk/src/decorators/requirePermissions.ts","../node_modules/@safe-global/safe-apps-sdk/src/safe/index.ts","../node_modules/@safe-global/safe-apps-sdk/src/sdk.ts","../node_modules/@safe-global/safe-apps-sdk/src/index.ts"],"sourcesContent":["export enum Methods {\n  sendTransactions = 'sendTransactions',\n  rpcCall = 'rpcCall',\n  getChainInfo = 'getChainInfo',\n  getSafeInfo = 'getSafeInfo',\n  getTxBySafeTxHash = 'getTxBySafeTxHash',\n  getSafeBalances = 'getSafeBalances',\n  signMessage = 'signMessage',\n  signTypedMessage = 'signTypedMessage',\n  getEnvironmentInfo = 'getEnvironmentInfo',\n  getOffChainSignature = 'getOffChainSignature',\n  requestAddressBook = 'requestAddressBook',\n  wallet_getPermissions = 'wallet_getPermissions',\n  wallet_requestPermissions = 'wallet_requestPermissions',\n}\n\nexport enum RestrictedMethods {\n  requestAddressBook = 'requestAddressBook',\n}\n","export const getSDKVersion = () => '9.1.0';\n","// i.e. 0-255 -> '00'-'ff'\nconst dec2hex = (dec: number): string => dec.toString(16).padStart(2, '0');\n\nconst generateId = (len: number): string => {\n  const arr = new Uint8Array((len || 40) / 2);\n  window.crypto.getRandomValues(arr);\n  return Array.from(arr, dec2hex).join('');\n};\n\nconst generateRequestId = (): string => {\n  if (typeof window !== 'undefined') {\n    return generateId(10);\n  }\n\n  return new Date().getTime().toString(36);\n};\n\nexport { generateRequestId };\n","import { ErrorResponse, SDKRequestData, RequestId, SuccessResponse, MethodToResponse } from '../types/index.js';\nimport { getSDKVersion } from '../version.js';\nimport { Methods } from './methods.js';\nimport { generateRequestId } from './utils.js';\n\nclass MessageFormatter {\n  static makeRequest = <M extends Methods = Methods, P = unknown>(method: M, params: P): SDKRequestData<M, P> => {\n    const id = generateRequestId();\n\n    return {\n      id,\n      method,\n      params,\n      env: {\n        sdkVersion: getSDKVersion(),\n      },\n    };\n  };\n\n  static makeResponse = (id: RequestId, data: MethodToResponse[Methods], version: string): SuccessResponse => ({\n    id,\n    success: true,\n    version,\n    data,\n  });\n\n  static makeErrorResponse = (id: RequestId, error: string, version: string): ErrorResponse => ({\n    id,\n    success: false,\n    error,\n    version,\n  });\n}\n\nexport { MessageFormatter };\n","import { MessageFormatter } from './messageFormatter.js';\nimport { Methods } from './methods.js';\nimport { InterfaceMessageEvent, Communicator, Response, SuccessResponse } from '../types/index.js';\n\n// eslint-disable-next-line\ntype Callback = (response: any) => void;\n\nclass PostMessageCommunicator implements Communicator {\n  private readonly allowedOrigins: RegExp[] | null = null;\n  private callbacks = new Map<string, Callback>();\n  private debugMode = false;\n  private isServer = typeof window === 'undefined';\n\n  constructor(allowedOrigins: RegExp[] | null = null, debugMode = false) {\n    this.allowedOrigins = allowedOrigins;\n    this.debugMode = debugMode;\n\n    if (!this.isServer) {\n      window.addEventListener('message', this.onParentMessage);\n    }\n  }\n\n  private isValidMessage = ({ origin, data, source }: InterfaceMessageEvent): boolean => {\n    const emptyOrMalformed = !data;\n    const sentFromParentEl = !this.isServer && source === window.parent;\n    const majorVersionNumber = typeof data.version !== 'undefined' && parseInt(data.version.split('.')[0]);\n    const allowedSDKVersion = typeof majorVersionNumber === 'number' && majorVersionNumber >= 1;\n    let validOrigin = true;\n    if (Array.isArray(this.allowedOrigins)) {\n      validOrigin = this.allowedOrigins.find((regExp) => regExp.test(origin)) !== undefined;\n    }\n\n    return !emptyOrMalformed && sentFromParentEl && allowedSDKVersion && validOrigin;\n  };\n\n  private logIncomingMessage = (msg: InterfaceMessageEvent): void => {\n    console.info(`Safe Apps SDK v1: A message was received from origin ${msg.origin}. `, msg.data);\n  };\n\n  private onParentMessage = (msg: InterfaceMessageEvent): void => {\n    if (this.isValidMessage(msg)) {\n      this.debugMode && this.logIncomingMessage(msg);\n      this.handleIncomingMessage(msg.data);\n    }\n  };\n\n  private handleIncomingMessage = (payload: InterfaceMessageEvent['data']): void => {\n    const { id } = payload;\n\n    const cb = this.callbacks.get(id);\n    if (cb) {\n      cb(payload);\n\n      this.callbacks.delete(id);\n    }\n  };\n\n  public send = <M extends Methods, P, R>(method: M, params: P): Promise<SuccessResponse<R>> => {\n    const request = MessageFormatter.makeRequest(method, params);\n\n    if (this.isServer) {\n      throw new Error(\"Window doesn't exist\");\n    }\n\n    window.parent.postMessage(request, '*');\n    return new Promise((resolve, reject) => {\n      this.callbacks.set(request.id, (response: Response<R>) => {\n        if (!response.success) {\n          reject(new Error(response.error));\n          return;\n        }\n\n        resolve(response);\n      });\n    });\n  };\n}\n\nexport default PostMessageCommunicator;\nexport * from './methods.js';\n","import { ChainInfo as _ChainInfo } from '@safe-global/safe-gateway-typescript-sdk';\n\nexport type ChainInfo = Pick<\n  _ChainInfo,\n  'chainName' | 'chainId' | 'shortName' | 'nativeCurrency' | 'blockExplorerUriTemplate'\n>;\n\nexport { NativeCurrency } from '@safe-global/safe-gateway-typescript-sdk';\n\nexport type BaseTransaction = {\n  to: string;\n  value: string;\n  data: string;\n};\n\nexport type GetTxBySafeTxHashParams = {\n  safeTxHash: string;\n};\n\nexport interface SendTransactionRequestParams {\n  safeTxGas?: number;\n}\n\nexport interface SendTransactionsParams {\n  txs: BaseTransaction[];\n  params?: SendTransactionRequestParams;\n}\n\nexport type GetBalanceParams = { currency?: string };\n\nexport type SignMessageParams = {\n  message: string;\n};\n\nexport interface TypedDataDomain {\n  name?: string;\n  version?: string;\n  chainId?: string | number | bigint | { toNumber: () => number };\n  verifyingContract?: string;\n  salt?: string;\n}\n\nexport interface TypedDataTypes {\n  name: string;\n  type: string;\n}\n\nexport type TypedMessageTypes = { [key: string]: TypedDataTypes[] };\n\nexport type EIP712TypedData = {\n  domain: TypedDataDomain;\n  types: TypedMessageTypes;\n  message: Record<string, any>;\n  primaryType?: string;\n};\n\nexport type SignTypedMessageParams = {\n  typedData: EIP712TypedData;\n};\n\nexport type SendTransactionsResponse = {\n  safeTxHash: string;\n};\n\nexport type OffChainSignMessageResponse = {\n  messageHash: string;\n};\n\nexport type SignMessageResponse = SendTransactionsResponse | OffChainSignMessageResponse;\n\nexport type SafeInfo = {\n  safeAddress: string;\n  chainId: number;\n  threshold: number;\n  owners: string[];\n  isReadOnly: boolean;\n};\n\nexport type SafeInfoExtended = SafeInfo & {\n  nonce: number;\n  implementation: string;\n  modules: string[] | null;\n  fallbackHandler: string | null;\n  guard: string | null;\n  version: string | null;\n};\n\nexport type EnvironmentInfo = {\n  origin: string;\n};\n\nexport type PostMessageOptions = {\n  transfer?: any[];\n};\n\nexport type AddressBookItem = {\n  address: string;\n  chainId: string;\n  name: string;\n};\n\nexport const isObjectEIP712TypedData = (obj?: unknown): obj is EIP712TypedData => {\n  return typeof obj === 'object' && obj != null && 'domain' in obj && 'types' in obj && 'message' in obj;\n};\n","import { Methods } from '../communication/methods.js';\nimport {\n  GatewayTransactionDetails,\n  SignMessageParams,\n  SendTransactionsParams,\n  GetTxBySafeTxHashParams,\n  Communicator,\n  SendTransactionsResponse,\n  SignTypedMessageParams,\n  EIP712TypedData,\n  isObjectEIP712TypedData,\n  SignMessageResponse,\n} from '../types/index.js';\n\nclass TXs {\n  private readonly communicator: Communicator;\n\n  constructor(communicator: Communicator) {\n    this.communicator = communicator;\n  }\n\n  async getBySafeTxHash(safeTxHash: string): Promise<GatewayTransactionDetails> {\n    if (!safeTxHash) {\n      throw new Error('Invalid safeTxHash');\n    }\n\n    const response = await this.communicator.send<\n      Methods.getTxBySafeTxHash,\n      GetTxBySafeTxHashParams,\n      GatewayTransactionDetails\n    >(Methods.getTxBySafeTxHash, { safeTxHash });\n\n    return response.data;\n  }\n\n  async signMessage(message: string): Promise<SignMessageResponse> {\n    const messagePayload = {\n      message,\n    };\n\n    const response = await this.communicator.send<Methods.signMessage, SignMessageParams, SignMessageResponse>(\n      Methods.signMessage,\n      messagePayload,\n    );\n\n    return response.data;\n  }\n\n  async signTypedMessage(typedData: EIP712TypedData): Promise<SignMessageResponse> {\n    if (!isObjectEIP712TypedData(typedData)) {\n      throw new Error('Invalid typed data');\n    }\n\n    const response = await this.communicator.send<\n      Methods.signTypedMessage,\n      SignTypedMessageParams,\n      SignMessageResponse\n    >(Methods.signTypedMessage, { typedData });\n\n    return response.data;\n  }\n\n  async send({ txs, params }: SendTransactionsParams): Promise<SendTransactionsResponse> {\n    if (!txs || !txs.length) {\n      throw new Error('No transactions were passed');\n    }\n\n    const messagePayload = {\n      txs,\n      params,\n    };\n\n    const response = await this.communicator.send<\n      Methods.sendTransactions,\n      SendTransactionsParams,\n      SendTransactionsResponse\n    >(Methods.sendTransactions, messagePayload);\n\n    return response.data;\n  }\n}\n\nexport { TXs };\n","export const RPC_CALLS = {\n  eth_call: 'eth_call',\n  eth_gasPrice: 'eth_gasPrice',\n  eth_getLogs: 'eth_getLogs',\n  eth_getBalance: 'eth_getBalance',\n  eth_getCode: 'eth_getCode',\n  eth_getBlockByHash: 'eth_getBlockByHash',\n  eth_getBlockByNumber: 'eth_getBlockByNumber',\n  eth_getStorageAt: 'eth_getStorageAt',\n  eth_getTransactionByHash: 'eth_getTransactionByHash',\n  eth_getTransactionReceipt: 'eth_getTransactionReceipt',\n  eth_getTransactionCount: 'eth_getTransactionCount',\n  eth_estimateGas: 'eth_estimateGas',\n  safe_setSettings: 'safe_setSettings',\n} as const;\n","import { RPC_CALLS } from '../eth/constants.js';\nimport {\n  BlockNumberArg,\n  RpcCallNames,\n  Communicator,\n  Log,\n  BlockTransactionString,\n  BlockTransactionObject,\n  Web3TransactionObject,\n  RPCPayload,\n  TransactionConfig,\n  Web3TransactionReceiptObject,\n  PastLogsOptions,\n  SafeSettings,\n} from '../types/index.js';\nimport { Methods } from '../communication/methods.js';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype Formatter = (arg: any) => any;\n\nconst inputFormatters: Record<string, Formatter> = {\n  defaultBlockParam: (arg = 'latest') => arg,\n  returnFullTxObjectParam: (arg = false): boolean => arg,\n  blockNumberToHex: (arg: BlockNumberArg): string =>\n    Number.isInteger(arg) ? `0x${arg.toString(16)}` : (arg as string),\n};\n\ntype BuildRequestArgs = {\n  call: RpcCallNames;\n  formatters?: (Formatter | null)[];\n};\n\nclass Eth {\n  public call;\n  public getBalance;\n  public getCode;\n  public getStorageAt;\n  public getPastLogs;\n  public getBlockByHash;\n  public getBlockByNumber;\n  public getTransactionByHash;\n  public getTransactionReceipt;\n  public getTransactionCount;\n  public getGasPrice;\n  public getEstimateGas;\n  public setSafeSettings;\n\n  private readonly communicator: Communicator;\n\n  constructor(communicator: Communicator) {\n    this.communicator = communicator;\n    this.call = this.buildRequest<[TransactionConfig, string?], string>({\n      call: RPC_CALLS.eth_call,\n      formatters: [null, inputFormatters.defaultBlockParam],\n    });\n    this.getBalance = this.buildRequest<[string, string?], string>({\n      call: RPC_CALLS.eth_getBalance,\n      formatters: [null, inputFormatters.defaultBlockParam],\n    });\n    this.getCode = this.buildRequest<[string, string?], string>({\n      call: RPC_CALLS.eth_getCode,\n      formatters: [null, inputFormatters.defaultBlockParam],\n    });\n    this.getStorageAt = this.buildRequest<[string, number, string?], string>({\n      call: RPC_CALLS.eth_getStorageAt,\n      formatters: [null, inputFormatters.blockNumberToHex, inputFormatters.defaultBlockParam],\n    });\n    this.getPastLogs = this.buildRequest<[PastLogsOptions], Log[]>({\n      call: RPC_CALLS.eth_getLogs,\n    });\n    this.getBlockByHash = this.buildRequest<[string, boolean?], BlockTransactionString | BlockTransactionObject>({\n      call: RPC_CALLS.eth_getBlockByHash,\n      formatters: [null, inputFormatters.returnFullTxObjectParam],\n    });\n    this.getBlockByNumber = this.buildRequest<\n      [BlockNumberArg, boolean?],\n      BlockTransactionString | BlockTransactionObject\n    >({\n      call: RPC_CALLS.eth_getBlockByNumber,\n      formatters: [inputFormatters.blockNumberToHex, inputFormatters.returnFullTxObjectParam],\n    });\n    this.getTransactionByHash = this.buildRequest<[string], Web3TransactionObject>({\n      call: RPC_CALLS.eth_getTransactionByHash,\n    });\n    this.getTransactionReceipt = this.buildRequest<[string], Web3TransactionReceiptObject>({\n      call: RPC_CALLS.eth_getTransactionReceipt,\n    });\n    this.getTransactionCount = this.buildRequest<[string, string?], string>({\n      call: RPC_CALLS.eth_getTransactionCount,\n      formatters: [null, inputFormatters.defaultBlockParam],\n    });\n    this.getGasPrice = this.buildRequest<never[], string>({\n      call: RPC_CALLS.eth_gasPrice,\n    });\n    this.getEstimateGas = (transaction: TransactionConfig): Promise<number> =>\n      this.buildRequest<[TransactionConfig], number>({\n        call: RPC_CALLS.eth_estimateGas,\n      })([transaction]);\n    this.setSafeSettings = this.buildRequest<[SafeSettings], SafeSettings>({\n      call: RPC_CALLS.safe_setSettings,\n    });\n  }\n\n  private buildRequest<P = never[], R = unknown>(args: BuildRequestArgs) {\n    const { call, formatters } = args;\n\n    return async (params?: P): Promise<R> => {\n      if (formatters && Array.isArray(params)) {\n        formatters.forEach((formatter: ((...args: unknown[]) => unknown) | null, i) => {\n          if (formatter) {\n            params[i] = formatter(params[i]);\n          }\n        });\n      }\n\n      const payload: RPCPayload<P> = {\n        call,\n        params: params || [],\n      };\n\n      const response = await this.communicator.send<Methods.rpcCall, RPCPayload<P>, R>(Methods.rpcCall, payload);\n\n      return response.data;\n    };\n  }\n}\n\nexport { Eth };\n","const MAGIC_VALUE = '0x1626ba7e';\nconst MAGIC_VALUE_BYTES = '0x20c13b0b';\n\nexport { MAGIC_VALUE, MAGIC_VALUE_BYTES };\n","export type Permission = {\n  parentCapability: string;\n  invoker: string;\n  date?: number;\n  caveats?: PermissionCaveat[];\n};\n\nexport type PermissionRequest = {\n  [method: string]: Record<string, unknown>;\n};\n\nexport type PermissionCaveat = {\n  type: string;\n  value?: unknown;\n  name?: string;\n};\n\nexport const PERMISSIONS_REQUEST_REJECTED = 4001;\n\nexport class PermissionsError extends Error {\n  public code: number;\n  public data?: unknown;\n\n  constructor(message: string, code: number, data?: unknown) {\n    super(message);\n\n    this.code = code;\n    this.data = data;\n\n    // Should adjust prototype manually because how TS handles the type extension compilation\n    // https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, PermissionsError.prototype);\n  }\n}\n","import { Methods, RestrictedMethods } from '../communication/methods.js';\nimport { Communicator } from '../types/index.js';\nimport { PermissionRequest, Permission, PermissionsError, PERMISSIONS_REQUEST_REJECTED } from '../types/permissions.js';\n\nclass Wallet {\n  private readonly communicator: Communicator;\n\n  constructor(communicator: Communicator) {\n    this.communicator = communicator;\n  }\n\n  async getPermissions(): Promise<Permission[]> {\n    const response = await this.communicator.send<Methods.wallet_getPermissions, undefined, Permission[]>(\n      Methods.wallet_getPermissions,\n      undefined,\n    );\n\n    return response.data;\n  }\n\n  async requestPermissions(permissions: PermissionRequest[]): Promise<Permission[]> {\n    if (!this.isPermissionRequestValid(permissions)) {\n      throw new PermissionsError('Permissions request is invalid', PERMISSIONS_REQUEST_REJECTED);\n    }\n\n    try {\n      const response = await this.communicator.send<\n        Methods.wallet_requestPermissions,\n        PermissionRequest[],\n        Permission[]\n      >(Methods.wallet_requestPermissions, permissions);\n\n      return response.data;\n    } catch {\n      throw new PermissionsError('Permissions rejected', PERMISSIONS_REQUEST_REJECTED);\n    }\n  }\n\n  isPermissionRequestValid(permissions: PermissionRequest[]): boolean {\n    return permissions.every((pr: PermissionRequest) => {\n      if (typeof pr === 'object') {\n        return Object.keys(pr).every((method) => {\n          if (Object.values(RestrictedMethods).includes(method as RestrictedMethods)) {\n            return true;\n          }\n\n          return false;\n        });\n      }\n\n      return false;\n    });\n  }\n}\n\nexport { Wallet };\n","import { Methods } from '../communication/index.js';\nimport { Safe } from '../safe/index.js';\nimport { Wallet } from '../wallet/index.js';\n\nimport { Permission, PermissionsError, PERMISSIONS_REQUEST_REJECTED } from '../types/permissions.js';\n\nconst hasPermission = (required: Methods, permissions: Permission[]): boolean =>\n  permissions.some((permission) => permission.parentCapability === required);\n\nconst requirePermission = () => (_: unknown, propertyKey: string, descriptor: PropertyDescriptor) => {\n  const originalMethod = descriptor.value;\n\n  descriptor.value = async function () {\n    // @ts-expect-error accessing private property from decorator. 'this' context is the class instance\n    const wallet = new Wallet((this as Safe).communicator);\n\n    let currentPermissions = await wallet.getPermissions();\n\n    if (!hasPermission(propertyKey as Methods, currentPermissions)) {\n      currentPermissions = await wallet.requestPermissions([{ [propertyKey as Methods]: {} }]);\n    }\n\n    if (!hasPermission(propertyKey as Methods, currentPermissions)) {\n      throw new PermissionsError('Permissions rejected', PERMISSIONS_REQUEST_REJECTED);\n    }\n\n    return originalMethod.apply(this);\n  };\n\n  return descriptor;\n};\n\nexport default requirePermission;\n","import { encodeFunctionData, Address, hashMessage, hashTypedData } from 'viem';\nimport { MAGIC_VALUE_BYTES, MAGIC_VALUE } from './signatures.js';\nimport { Methods } from '../communication/methods.js';\nimport { RPC_CALLS } from '../eth/constants.js';\nimport {\n  Communicator,\n  ChainInfo,\n  SafeBalances,\n  GetBalanceParams,\n  RPCPayload,\n  TransactionConfig,\n  EnvironmentInfo,\n  AddressBookItem,\n  isObjectEIP712TypedData,\n  EIP712TypedData,\n  SafeInfoExtended,\n} from '../types/index.js';\nimport requirePermission from '../decorators/requirePermissions.js';\n\nclass Safe {\n  private readonly communicator: Communicator;\n\n  constructor(communicator: Communicator) {\n    this.communicator = communicator;\n  }\n\n  async getChainInfo(): Promise<ChainInfo> {\n    const response = await this.communicator.send<Methods.getChainInfo, undefined, ChainInfo>(\n      Methods.getChainInfo,\n      undefined,\n    );\n\n    return response.data;\n  }\n\n  async getInfo(): Promise<SafeInfoExtended> {\n    const response = await this.communicator.send<Methods.getSafeInfo, undefined, SafeInfoExtended>(\n      Methods.getSafeInfo,\n      undefined,\n    );\n\n    return response.data;\n  }\n\n  // There is a possibility that this method will change because we may add pagination to the endpoint\n  async experimental_getBalances({ currency = 'usd' }: GetBalanceParams = {}): Promise<SafeBalances> {\n    const response = await this.communicator.send<Methods.getSafeBalances, { currency: string }, SafeBalances>(\n      Methods.getSafeBalances,\n      {\n        currency,\n      },\n    );\n\n    return response.data;\n  }\n\n  private async check1271Signature(messageHash: string, signature = '0x'): Promise<boolean> {\n    const safeInfo = await this.getInfo();\n\n    const encodedIsValidSignatureCall = encodeFunctionData({\n      abi: [\n        {\n          constant: false,\n          inputs: [\n            {\n              name: '_dataHash',\n              type: 'bytes32',\n            },\n            {\n              name: '_signature',\n              type: 'bytes',\n            },\n          ],\n          name: 'isValidSignature',\n          outputs: [\n            {\n              name: '',\n              type: 'bytes4',\n            },\n          ],\n          payable: false,\n          stateMutability: 'nonpayable',\n          type: 'function',\n        },\n      ] as const,\n      functionName: 'isValidSignature',\n      args: [messageHash as Address, signature as Address],\n    });\n\n    const payload = {\n      call: RPC_CALLS.eth_call,\n      params: [\n        {\n          to: safeInfo.safeAddress,\n          data: encodedIsValidSignatureCall,\n        },\n        'latest',\n      ],\n    };\n    try {\n      const response = await this.communicator.send<Methods.rpcCall, RPCPayload<[TransactionConfig, string]>, string>(\n        Methods.rpcCall,\n        payload,\n      );\n\n      return response.data.slice(0, 10).toLowerCase() === MAGIC_VALUE;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  private async check1271SignatureBytes(messageHash: string, signature = '0x'): Promise<boolean> {\n    const safeInfo = await this.getInfo();\n\n    const encodedIsValidSignatureCall = encodeFunctionData({\n      abi: [\n        {\n          constant: false,\n          inputs: [\n            {\n              name: '_data',\n              type: 'bytes',\n            },\n            {\n              name: '_signature',\n              type: 'bytes',\n            },\n          ],\n          name: 'isValidSignature',\n          outputs: [\n            {\n              name: '',\n              type: 'bytes4',\n            },\n          ],\n          payable: false,\n          stateMutability: 'nonpayable',\n          type: 'function',\n        },\n      ] as const,\n      functionName: 'isValidSignature',\n      args: [messageHash as Address, signature as Address],\n    });\n\n    const payload = {\n      call: RPC_CALLS.eth_call,\n      params: [\n        {\n          to: safeInfo.safeAddress,\n          data: encodedIsValidSignatureCall,\n        },\n        'latest',\n      ],\n    };\n\n    try {\n      const response = await this.communicator.send<Methods.rpcCall, RPCPayload<[TransactionConfig, string]>, string>(\n        Methods.rpcCall,\n        payload,\n      );\n\n      return response.data.slice(0, 10).toLowerCase() === MAGIC_VALUE_BYTES;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  calculateMessageHash(message: string): string {\n    return hashMessage(message);\n  }\n\n  calculateTypedMessageHash(typedMessage: EIP712TypedData): string {\n    const chainId =\n      typeof typedMessage.domain.chainId === 'object'\n        ? typedMessage.domain.chainId.toNumber()\n        : Number(typedMessage.domain.chainId);\n\n    let primaryType = typedMessage.primaryType;\n    if (!primaryType) {\n      const fields = Object.values(typedMessage.types);\n      // We try to infer primaryType (simplified ether's version)\n      const primaryTypes = Object.keys(typedMessage.types).filter((typeName) =>\n        fields.every((dataTypes) => dataTypes.every(({ type }) => type.replace('[', '').replace(']', '') !== typeName)),\n      );\n      if (primaryTypes.length === 0 || primaryTypes.length > 1) throw new Error('Please specify primaryType');\n      primaryType = primaryTypes[0];\n    }\n\n    return hashTypedData({\n      message: typedMessage.message,\n      domain: {\n        ...typedMessage.domain,\n        chainId,\n        verifyingContract: typedMessage.domain.verifyingContract as Address,\n        salt: typedMessage.domain.salt as Address,\n      },\n      types: typedMessage.types,\n      primaryType,\n    });\n  }\n\n  async getOffChainSignature(messageHash: string): Promise<string> {\n    const response = await this.communicator.send<Methods.getOffChainSignature, string, string>(\n      Methods.getOffChainSignature,\n      messageHash,\n    );\n\n    return response.data;\n  }\n\n  async isMessageSigned(message: string | EIP712TypedData, signature = '0x'): Promise<boolean> {\n    let check: (() => Promise<boolean>) | undefined;\n    if (typeof message === 'string') {\n      check = async (): Promise<boolean> => {\n        const messageHash = this.calculateMessageHash(message);\n        const messageHashSigned = await this.isMessageHashSigned(messageHash, signature);\n        return messageHashSigned;\n      };\n    }\n\n    if (isObjectEIP712TypedData(message)) {\n      check = async (): Promise<boolean> => {\n        const messageHash = this.calculateTypedMessageHash(message);\n        const messageHashSigned = await this.isMessageHashSigned(messageHash, signature);\n        return messageHashSigned;\n      };\n    }\n    if (check) {\n      const isValid = await check();\n\n      return isValid;\n    }\n\n    throw new Error('Invalid message type');\n  }\n\n  async isMessageHashSigned(messageHash: string, signature = '0x'): Promise<boolean> {\n    const checks = [this.check1271Signature.bind(this), this.check1271SignatureBytes.bind(this)];\n\n    for (const check of checks) {\n      const isValid = await check(messageHash, signature);\n      if (isValid) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  async getEnvironmentInfo(): Promise<EnvironmentInfo> {\n    const response = await this.communicator.send<Methods.getEnvironmentInfo, undefined, EnvironmentInfo>(\n      Methods.getEnvironmentInfo,\n      undefined,\n    );\n\n    return response.data;\n  }\n\n  @requirePermission()\n  async requestAddressBook(): Promise<AddressBookItem[]> {\n    const response = await this.communicator.send<Methods.requestAddressBook, undefined, AddressBookItem[]>(\n      Methods.requestAddressBook,\n      undefined,\n    );\n\n    return response.data;\n  }\n}\n\nexport { Safe };\n","import { Communicator } from './types/index.js';\nimport InterfaceCommunicator from './communication/index.js';\nimport { TXs } from './txs/index.js';\nimport { Eth } from './eth/index.js';\nimport { Safe } from './safe/index.js';\nimport { Wallet } from './wallet/index.js';\n\nexport type Opts = {\n  allowedDomains?: RegExp[];\n  debug?: boolean;\n};\n\nclass SafeAppsSDK {\n  private readonly communicator: Communicator;\n  public readonly eth: Eth;\n  public readonly txs: TXs;\n  public readonly safe: Safe;\n  public readonly wallet: Wallet;\n\n  constructor(opts: Opts = {}) {\n    const { allowedDomains = null, debug = false } = opts;\n\n    this.communicator = new InterfaceCommunicator(allowedDomains, debug);\n    this.eth = new Eth(this.communicator);\n    this.txs = new TXs(this.communicator);\n    this.safe = new Safe(this.communicator);\n    this.wallet = new Wallet(this.communicator);\n  }\n}\n\nexport default SafeAppsSDK;\n","import SDK from './sdk.js';\n\nexport default SDK;\nexport * from './sdk.js';\nexport * from './types/index.js';\nexport * from './communication/methods.js';\nexport * from './communication/messageFormatter.js';\nexport { getSDKVersion } from './version.js';\nexport * from './eth/constants.js';\n"],"names":["Methods","RestrictedMethods","getSDKVersion","dec2hex","dec","toString","padStart","generateRequestId","window","len","arr","Uint8Array","crypto","getRandomValues","Array","from","join","generateId","Date","getTime","MessageFormatter","method","params","id","env","sdkVersion","data","version","success","error","PostMessageCommunicator","allowedOrigins","debugMode","callbacks","Map","isServer","isValidMessage","origin","source","emptyOrMalformed","sentFromParentEl","parent","majorVersionNumber","parseInt","split","allowedSDKVersion","validOrigin","isArray","undefined","find","regExp","test","logIncomingMessage","msg","console","info","onParentMessage","handleIncomingMessage","payload","cb","get","delete","send","request","makeRequest","Error","postMessage","Promise","resolve","reject","set","response","this","addEventListener","isObjectEIP712TypedData","obj","TXs","communicator","safeTxHash","getTxBySafeTxHash","message","messagePayload","signMessage","typedData","signTypedMessage","txs","length","sendTransactions","RPC_CALLS","eth_call","eth_gasPrice","eth_getLogs","eth_getBalance","eth_getCode","eth_getBlockByHash","eth_getBlockByNumber","eth_getStorageAt","eth_getTransactionByHash","eth_getTransactionReceipt","eth_getTransactionCount","eth_estimateGas","safe_setSettings","inputFormatters","defaultBlockParam","arg","returnFullTxObjectParam","blockNumberToHex","Number","isInteger","Eth","call","buildRequest","formatters","getBalance","getCode","getStorageAt","getPastLogs","getBlockByHash","getBlockByNumber","getTransactionByHash","getTransactionReceipt","getTransactionCount","getGasPrice","getEstimateGas","transaction","setSafeSettings","args","forEach","formatter","i","rpcCall","MAGIC_VALUE","MAGIC_VALUE_BYTES","PERMISSIONS_REQUEST_REJECTED","PermissionsError","code","Object","setPrototypeOf","prototype","Wallet","wallet_getPermissions","permissions","isPermissionRequestValid","wallet_requestPermissions","every","pr","keys","values","includes","hasPermission","required","some","permission","parentCapability","_","propertyKey","descriptor","originalMethod","value","wallet","getPermissions","currentPermissions","requestPermissions","apply","Safe","getChainInfo","getSafeInfo","currency","getSafeBalances","messageHash","signature","getInfo","safeInfo","encodedIsValidSignatureCall","encodeFunctionData","abi","constant","inputs","name","type","outputs","payable","stateMutability","functionName","to","safeAddress","slice","toLowerCase","hashMessage","typedMessage","chainId","domain","toNumber","primaryType","fields","types","primaryTypes","filter","typeName","dataTypes","replace","hashTypedData","verifyingContract","salt","getOffChainSignature","check","calculateMessageHash","isMessageHashSigned","messageHashSigned","calculateTypedMessageHash","isValid","checks","check1271Signature","bind","check1271SignatureBytes","getEnvironmentInfo","requestAddressBook","__decorate","requirePermission","SafeAppsSDK","opts","allowedDomains","debug","InterfaceCommunicator","eth","safe"],"sourceRoot":""}